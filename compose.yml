services:
  nginx:
    container_name: nginx-proxy
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile
    ports: 
      - "80:80"
    depends_on:
      fe: 
        condition: service_healthy
      auth-service:
        condition: service_healthy
      file-service:
        condition: service_healthy

  fe:
    container_name: frontend
    build:
      context: ./fe
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - "./fe:/usr/src/sf-fe"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://fe:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile 
    env_file:
      - .env
      - ./auth-service/.auth.env
    depends_on:
      migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://auth-service:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  file-service:
    container_name: file-service
    build:
      context: ./file-service
      dockerfile: Dockerfile
    env_file:
      - .env
      - ./file-service/.file.env
    volumes:
      - files:/usr/src/file-service/files 
      - images:/usr/src/file-service/userImages
    depends_on:
      migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://file-service:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration:
    container_name: migration
    build:
      context: ./migrations
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: no
    entrypoint: [
      "migrate",
      "-path", "/app/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]

volumes:
  postgres_data:
  files:
  images:
