version: "2.4"

services:
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports: 
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs/:/etc/nginx/certs/
    depends_on:
      fe: 
        condition: service_healthy
      auth-service:
        condition: service_healthy
      file-service:
        condition: service_healthy

  fe:
    build:
      context: ./fe
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://fe:80"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile 
    env_file:
      - .env
    depends_on:
      migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://auth-service:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  file-service:
    build:
      context: ./file-service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - files:/usr/src/file-service/files 
      - images:/usr/src/file-service/userImages
    depends_on:
      migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://file-service:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration:
    build:
      context: ./migrations
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    entrypoint: [
      "migrate",
      "-path", "/app/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_NAME}?sslmode=disable",
      "up"
    ]
    restart: no


volumes:
  postgres_data:
  files:
  images:
