services:
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports: 
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      fe: 
        condition: service_healthy
      auth-service:
        condition: service_healthy
      file-service:
        condition: service_healthy
      db:
        condition: service_healthy

  fe:
    build:
      context: ./fe
      dockerfile: Dockerfile
    ports: 
      - "3000:3000"
    volumes:
      - ".:/usr/sf-fe"
      - "/usr/sf-fe/node_modules"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://fe:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile 
    expose:
      - "80"
    env_file:
      - ./auth-service/.env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://auth-service:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  file-service:
    build:
      context: ./file-service
      dockerfile: Dockerfile
    expose:
      - "8082"
    volumes:
      - files:/usr/src/file-service/files 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://file-service:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:latest
    expose:
      - "5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration:
    build:
      context: ./migrations
      dockerfile: Dockerfile
    profiles:
      - migrations
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  files:
